@using GridMvc.Html
@model List<QuartzScheduler.Web.Models.JobTriggerViewModel>
<div>
    <h2>Job Trigger List</h2>
    <a href="http://www.cronmaker.com" target="_blank"><span>Help link for creating cron expression</span></a>
    <div class="row">
        <div class="col-md-11">
            @Html.Grid(Model).Named("jobListGrid").Columns(columns =>
            {
                columns.Add().Encoded(false)
                    .Sanitized(false)
                    .SetWidth(20)
                    .RenderValueAs(d => @Ajax.ActionLink(" ", "PauseJob", "Home", new { name = d.JobName, group = d.JobGroup }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "jobGrid", LoadingElementId = "spinner" }, new { @class = "btn btn-warning glyphicon glyphicon-pause" }));
                columns.Add().Encoded(false)
                    .Sanitized(false)
                    .SetWidth(20)
                    .RenderValueAs(d => @Ajax.ActionLink(" ", "ResumeJob", "Home", new { name = d.JobName, group = d.JobGroup }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "jobGrid", LoadingElementId = "spinner" }, new { @class = "btn btn-success glyphicon glyphicon-play" }));
                columns.Add().Encoded(false)
                    .Sanitized(false)
                    .SetWidth(20)
                    .RenderValueAs(d => @Ajax.ActionLink(" ", "RemoveJob", "Home", new { name = d.JobName, group = d.JobGroup }, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "jobGrid", LoadingElementId = "spinner", Confirm = "Are you sure you want to delete job?" }, new { @class = "btn btn-danger glyphicon glyphicon-remove" }));
                columns.Add(c => c.JobName).Titled("Job Name");
                columns.Add(c => c.JobGroup).Titled("Job Group");
                columns.Add(c => c.State).Titled("Status");
                columns.Add(c => c.CronExpression).Titled("Cron Expression");
                columns.Add(c => c.PreviousFireTime).Titled("Previous Fire Time");
                columns.Add(c => c.NextFireTime).Titled("Next Fire Time");
                columns.Add(c => c.Properties, true);
            }).WithPaging(10).Selectable(true)
        </div>
        <div class="col-md-1">
            <div id="details" class="affix">
                <h3>Properties</h3>
                <div id="detailProperties">
                    <p>Select job to display detailed infomation</p>
                </div>
            </div>
        </div>
    </div>
    <div class="row operationGroup">
        @Ajax.ActionLink("Pause All", "PauseAll", null, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "jobGrid", LoadingElementId = "spinner" }, new { @class = "btn btn-primary" })
        @Ajax.ActionLink("Resume All", "ResumeAll", null, new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "jobGrid", LoadingElementId = "spinner" }, new { @class = "btn btn-primary" })
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addJobModal">Add Job</button>
    </div>
</div>
<script>
    $(function () {
        pageGrids.jobListGrid.onRowSelect(function (e) {
            var props = e.row.Properties.toString().split(";");
            var i;
            var html = "<dl>";
            for (i = 0; i < props.length; i++) {
                html = html + "<dt>" + props[i].split("=")[0] + "</dt><dd>" + props[i].split("=")[1] + "</dd>";
            }
            html = html + "</dl>";

            $("#detailProperties").empty();
            var propDiv = $(document.createElement('div')).attr("id", "properties");
            propDiv.after().html(html);
            propDiv.appendTo("#detailProperties");
        });
    });
</script>
